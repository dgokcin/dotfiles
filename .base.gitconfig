[user]
    # Change this to your name
    name = Deniz Gökçin

[merge]
    ff = false
    tool = intellij

[mergetool]
	keepBackup = false

# Use intellij as git mergetool
[mergetool "intellij"]
    cmd = open -nWa 'IntelliJ IDEA.app' --args merge $(cd $(dirname "$LOCAL") && pwd)/$(basename "$LOCAL") $(cd $(dirname "$REMOTE") && pwd)/$(basename "$REMOTE") $(cd $(dirname "$BASE") && pwd)/$(basename "$BASE") $(cd $(dirname "$MERGED") && pwd)/$(basename "$MERGED")
    trustExitCode = true

[diff]
    tool = intellij

[difftool]
    prompt = false

# Use intellij as git difftool
[difftool "intellij"]
    cmd = open -nWa 'IntelliJ IDEA.app' --args diff $(cd $(dirname "$LOCAL") && pwd)/$(basename "$LOCAL") $(cd $(dirname "$REMOTE") && pwd)/$(basename "$REMOTE")

[core]
    filemode = false
    autocrlf = input
    whitespace = cr-at-eol

[pull]
	rebase = false

[alias]
    # Add
    a = add

    # Add
    f = fetch

    # Status
    s = status

    # Push
    p = push

    # Set upstream automatically
    po = !git push -u origin  $(git symbolic-ref --short HEAD)

    # Git sync the local branch with the remote branch
    sync = "!git fetch origin && git reset --hard origin/$(git symbolic-ref --short HEAD) && git clean -df"

    # Git stash,fetch and pull
    sfp = "!git stash && git fetch && git pull"

    # Git add, git commit, git push
    acp = "!f() { git add -A && git commit -m \"$@\" && git push; }; f"

    # Git commit, git push
    cp = "!f() { git commit -m \"$@\" && git push; }; f"

    # Git log with tree view
    tlog="!git log --all --decorate --oneline --graph"

    # Git log in a single line
    slog="!git log --oneline"

    # Show the diff between the latest commit and the current state
    d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

    # Switch to a branch, creating it if necessary
    go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

    # List aliases
    aliases = config --get-regexp alias

    # Amend the currently staged files to the latest commit
    amend = commit --amend --reuse-message=HEAD

    # Change the latest commit message
    ccm = "!f() { git commit --amend -m \"$@\" && git push --force; }; f"

    # Interactive rebase with the given number of latest commits
    reb = "!r() { git rebase -i HEAD~$1; }; r"

    # rebase on main origin branch
    rom = !git fetch --all && git rebase $(git rev-parse --abbrev-ref origin/HEAD)

    # Find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"

    # Find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"

    # Find commits by source code
    fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

    # Find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

    # Remove branches that have already been merged with master
    # a.k.a. ‘delete merged’
    dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

    # List contributors with number of commits
    contributors = shortlog --summary --numbered

    # Show the user email for the current repository.
    whoami = config user.email

    # Create a release branch from the current branch named release/DDMMYYY. If a release branch already exists, a new one will not be created with -1 appended to the name. if it exists as well -2 will be appended and so on.
    release = "!f() { \
        local branch=$(git rev-parse --abbrev-ref HEAD); \
        local date=$(date '+%d%m%Y'); \
        local release_branch='release/'$date; \
        local counter=0; \
        while git show-ref --verify --quiet refs/heads/$release_branch; do \
            counter=$((counter+1)); \
            release_branch='release/'$date'-'$counter; \
        done; \
        git checkout -b $release_branch; \
        echo 'Created release branch: '$release_branch; \
    }; f"

    # rebase current branch on top of input branch
    rbo = "!f() { \
        if [ -z \"$1\" ]; then \
            echo \"No input branch given\"; \
            exit 1; \
        fi; \
        git fetch origin $1; \
        git rebase origin/$1; \
        }; f"

[help]

    # Automatically correct and execute mistyped commands
    autocorrect = 1

