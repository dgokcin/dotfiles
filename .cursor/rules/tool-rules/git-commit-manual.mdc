---
description: ALWAYS use when generating git commit messages to ensure consistent, conventional commit format that is clear, concise, and informative. This rule provides structured guidelines for creating standardized commit messages based on Git diffs.
globs:
alwaysApply: false
---

<critical-rules>
- If the user has asked you to commit based on staged files, execute git `git diff --staged | cat` to understand the diff context.
- If the user has asked you to commit based on unstaged files, execute git `git diff | cat` to understand the diff context.
- If the user has not specified, always use the staged files for the diff context.
<critical-rules>

# Git Commit Message Standards

## Critical Rules

- Adhere strictly to the Conventional Commits format
- Use allowed types: `feat`, `fix`, `build`, `chore`, `ci`, `docs`, `style`, `test`, `perf`, `refactor`
- Write commit messages entirely in lowercase
- Keep the commit message title under 60 characters
- Use present tense in both title and body
- Format commit with a command in a single `bash` code block
- Tailor message detail to the extent of changes:
  - For few changes: Be concise
  - For many changes: Include more details in the body
- Follow this process for creating commits:
  1. Analyze the diff context thoroughly
  2. Identify primary changes and their significance
  3. Determine appropriate commit type and scope (if applicable)
  4. Craft clear, concise description for the commit title
  5. Create detailed body when needed explaining the changes
  6. Include resolved issues in the footer when specified
  7. Format according to guidelines and flags

## Examples

<example>
# Basic commit
```bash
git commit -m "fix: correct input validation in user registration"
```

# Commit with body
```bash
git commit -m "feat(auth): implement two-factor authentication

- add sms and email options for 2fa
- update user model to support 2fa preferences
- create new api endpoints for 2fa setup and verification"
```

# Commit with resolved issues
```bash
git commit -m "docs: update readme with additional troubleshooting steps for arm64 architecture

- clarified the instruction to replace debuggerPath in launch.json
- added steps to verify compatibility of cmake, clang, and clang++ with arm64 architecture
- provided example output for architecture verification commands
- included command to upgrade llvm using homebrew on macos
- added note to retry compilation process after ensuring compatibility

Fixes #123, #124"
```
</example>

<example type="invalid">
# Non-conventional format
```bash
git commit -m "Fixed the bug in the login page"
```

# Capitalized commit message
```bash
git commit -m "Fix: Correct input validation in user registration"
```

# Past tense message
```bash
git commit -m "fix: corrected input validation in user registration"
```

# Title too long
```bash
git commit -m "fix: implement comprehensive input validation strategy for the user registration workflow"
```
</example>