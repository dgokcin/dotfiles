---
description: ALWAYS use when working with Kubernetes Custom Resources to ensure proper API versions and resource definitions are used
globs:
alwaysApply: false
---

# Kubernetes CRD Version Management

## Context

- Kubernetes CRDs can have multiple versions
- API versions can be deprecated over time
- Different versions may have different field structures
- Examples: Karpenter Provisioner -> NodeClass migration

## Critical Rules

- ALWAYS check CRD versions before creating/modifying resources:
  ```bash
  kubectl get crd <resource>.group | grep -i versions -A 5
  ```
- Verify if versions are deprecated:
  ```bash
  kubectl explain <resource>.status.conditions
  ```
- Use `kubectl api-resources` to confirm current resource types
- Check official documentation for version migration guides
- For cluster-specific resources, verify installed versions:
  ```bash
  kubectl get <controller> -n <namespace> -o jsonpath='{.spec.version}'
  ```
- Document version requirements in deployment manifests

## Examples

<example>
# Karpenter NodeClass (Current)
```yaml
apiVersion: karpenter.sh/v1beta1
kind: NodeClass
metadata:
  name: default
spec:
  # NodeClass configuration
```

# Version Check
```bash
$ kubectl get crd nodeclasses.karpenter.sh
NAME                        CREATED AT
nodeclasses.karpenter.sh   2024-01-15T10:00:00Z
```
</example>

<example type="invalid">
# Using Deprecated Provisioner
```yaml
apiVersion: karpenter.sh/v1alpha5
kind: Provisioner
metadata:
  name: default
spec:
  # Old provisioner configuration
```
</example>