---
description: ALWAYS update when encountering significant AI mistakes or learning moments to improve future interactions
globs: .ai/lessons/*.md
tags: [lessons, ai-interaction, improvement]
priority: 2
version: 1.0.0
---

# AI Lessons Learned Tracking

## Context
- Used to document significant learning moments from AI interactions
- Captures both mistakes and successful improvements
- Helps improve future AI interactions and maintain institutional knowledge

## Requirements

### File Structure
- Lessons must be stored in `.ai/lessons/YYYY-MM-DD-lesson-title.md`
- Each lesson should be a separate file
- Files should be organized by date for easy tracking

### Lesson Content Structure

#### Required Sections

1. **Header**
   - Date
   - Title
   - Category (Error, Improvement, Discovery)
   - Impact Level (High, Medium, Low)

2. **Context**
   - Original situation/request
   - What was expected
   - What actually happened

3. **Root Cause**
   - Analysis of why the issue occurred
   - Any contributing factors

4. **Resolution**
   - How the issue was resolved
   - What was learned
   - New approach/pattern to use

5. **Prevention**
   - Steps to prevent similar issues
   - Updated practices or patterns
   - Specific instructions for the AI

#### Optional Sections

- Code snippets demonstrating the issue/solution
- Links to related issues or documentation
- Follow-up tasks or monitoring needs

## Examples

<example>
# 2024-03-15: Incorrect Package Version Management

## Category: Error
## Impact: High

### Context
Asked AI to update package.json dependencies, but it suggested incompatible versions.

### Root Cause
AI didn't check existing dependency tree and version constraints.

### Resolution
- Implemented explicit version checking
- Added package-lock.json review step

### Prevention
- Always check existing package-lock.json
- Verify version compatibility before updates
- Run test suite after dependency changes
</example>

<example type="invalid">
Bug: AI made mistake with code

It suggested wrong code. Don't do that again.

Fixed by writing correct code.
</example>

## Implementation Guidelines

1. Create new lesson files immediately after discovering significant issues
2. Use clear, specific titles that identify the core issue
3. Include enough context for future reference
4. Focus on actionable prevention steps
5. Tag related code patterns or tools
6. Update related documentation or rules if needed

## Maintenance

- Review lessons quarterly for patterns
- Archive resolved issues that are no longer relevant
- Update prevention strategies based on new learnings
- Consolidate similar lessons when patterns emerge