---
description: ALWAYS use when asked to use the agile workflow protocol
globs:
alwaysApply:
---
# Agile Workflow and core memory procedure RULES that MUST be followed EXACTLY!

<critical-rules>
- First Ensure a .ai/prd.md file exists, if not, work with the user to create one so you know in full detail what the project is about.
- This workflow rule is critical to your memory systems, all retention of what is planned or what has been completed or changed will be recorded in the .ai folder.
- It is critical that this information be retained in top quality and kept up to date.
- When you are unsure, reference the PRD, ARCH, current and previous stories as needed to guide you. If still unsure, don't ever guess - ask the user for help.
- Follow `.cursor/rules/documentation/timestamp-auto.mdc` for all timestamps.
- Ask the user if they want to use the github mcp for managing the epics and stories.
- If the github mcp is being used, than ALWAYS sync the local epics and stories with github mcp after creating/updating epics and stories locally.
- Do not use issue numbers from `.ai/epics/epic-n-descriptive-epic-name/` for the stories you will create with the github mcp as github will automatically add issue numbers to the stories you create.
- Make sure you reference the issues with the `#<issue_number>` syntax in GitHub instead of hardcoding the issue number in the story file.
</critical-rules>

# Agile Workflow Protocol

## Context

- Managing project documentation and progress
- Ensuring consistent development process
- Maintaining project memory and history

## Critical Rules

- Use templates from `.cursor/templates/` for new documents
- Verify/create `.ai/prd.md` using `prd-manual.mdc` template
- Document architecture using `arch-manual.mdc` template
- Create stories using `story-manual.mdc` template
- Wait for the users approval in between each step
- Follow TDD with 80% test coverage
- Track lessons learned
- Update story files as work progresses

### Required File Structure

```
.cursor/
├── templates/           # Document Templates
│   ├── arch-manual.mdc  # Architecture template
│   ├── prd-manual.mdc   # PRD template
│   └── story-manual.mdc # Story template
.ai/
├── prd.md              # Product Requirements
├── arch.md             # Architecture
├── arch/               # Architecture Decisions
│   └── {n}-descriptive-decision-name.md
├── epics/              # Epics
│   ├── epic-{n}-descriptive-epic-name/     # Example: epic-1-user-authentication/
│   │   ├── story-descriptive-story-name.md  # Example: story-oauth-setup.md
│   │   └── story-descriptive-story-name.md  # Example: story-user-roles.md
│   │   └── story-descriptive-story-name.md  # Example: story-user-roles.md
│   └── epic-{n}-descriptive-epic-name/     # Example: epic-2-payment-processing/
└── lessons/           # Lessons Learned
    └── YYYY-MM-DD-descriptive-lesson-name.md
```

### Workflow Steps

1. Verify/create PRD
2. Create/update architecture docs
3. Create story files
4. Implement with TDD
5. Document decisions/lessons
6. Update progress regularly

## Examples

<example>
# Project Initialization

1. Create PRD:
```markdown
# Project Requirements

## Purpose
Develop inventory management system

## Architecture
[Diagram and patterns]

## Technologies
- Node.js v18
- PostgreSQL
- Redis
```

2. Create Story:
```markdown
# story-project-setup: Initial Project Configuration

## Tasks
- [ ] Initialize project structure
- [ ] Configure development environment
- [ ] Set up database schema
- [ ] Implement basic CI/CD pipeline
```
</example>

<example type="invalid">
Started coding without PRD
No tests written
Missing documentation
[Violates TDD and documentation requirements]
</example>