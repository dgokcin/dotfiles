---
description: ALWAYS use when working with existing projects to establish agile workflow and documentation
globs: 
alwaysApply: false
---

# Existing Project Integration Workflow

## Context
- When working with an existing codebase that lacks agile documentation
- When needing to understand and document an established project
- When transitioning a project to the agile workflow

## Requirements

### Initial Project Analysis
- Perform a comprehensive exploration of the codebase structure
- Analyze git history to understand project evolution
- Identify core components, dependencies, and architecture
- Document existing functionality and features

### Documentation Creation

1. Create the `.ai` directory at the project root if it doesn't exist
2. Generate PRD document based on existing functionality:
   - Use [901-prd.mdc](mdc:.cursor/rules/901-prd.mdc) as a template
   - Begin with "Reverse Engineered" status
   - Document observed project purpose and scope
   - Extract feature sets from existing implementation
   - Organize into logical Epics based on codebase structure
   - Mark current status based on git history analysis
3. Generate Architecture document:
   - Use [902-arch.mdc](mdc:.cursor/rules/902-arch.mdc) as a template
   - Document existing technology stack and dependencies
   - Create diagrams of the observed architecture
   - Identify data models and schemas from the codebase
   - Document current project structure
4. Create appropriate Epic and Story structure:
   - Use [903-story.mdc](mdc:.cursor/rules/903-story.mdc) as a template
   - Identify completed work based on git history
   - Document current work in progress
   - Create stories for incomplete features

### Workflow Integration

1. Consult with the user to validate understanding of:
   - Project purpose and goals
   - Architectural decisions
   - Feature organization
2. Update documentation based on user feedback
3. Apply standard agile workflow for ongoing work

## Steps for Existing Project Analysis

1. **Codebase Exploration**
   - List the directory structure to understand project organization
   - Examine key configuration files (package.json, requirements.txt, etc.)
   - Identify main entry points and core components
   - Analyze dependencies and third-party integrations

2. **Git History Analysis**
   - Check recent commits to understand current work
   - Identify major releases or versions
   - Note contributors and their areas of focus
   - Recognize patterns in development flow

3. **Documentation Generation**
   - Create PRD.md following the 901-prd.mdc template
   - Create arch.md following the 902-arch.mdc template
   - Establish Epic structure based on major feature sets
   - Document existing stories and create new ones as needed

4. **User Consultation**
   - Present findings and seek clarification
   - Validate assumptions about project purpose and architecture
   - Confirm Epic and Story organization
   - Establish priorities for ongoing work

## Examples

<example>
# Initial Project Analysis

## Directory Structure Analysis
```
$ ls -la
total 928
drwxr-xr-x  18 user  group    576 May 10 15:42 .
drwxr-xr-x  21 user  group    672 May  8 09:13 ..
-rw-r--r--   1 user  group    182 May  8 09:30 .gitignore
-rw-r--r--   1 user  group   1073 May  8 09:30 README.md
drwxr-xr-x   8 user  group    256 May 10 15:42 src
drwxr-xr-x  12 user  group    384 May 10 15:42 tests
-rw-r--r--   1 user  group  12289 May 10 15:42 package.json
...
```

## Git History Analysis
```
$ git log --oneline -n 10
a1b2c3d Added user authentication feature
e4f5g6h Fixed responsive layout issues on mobile
i7j8k9l Implemented product search functionality
...
```

## Major Components Identified
1. User Authentication System
2. Product Catalog
3. Search Functionality
4. Shopping Cart
5. Checkout Process

## Documentation Creation
- Created .ai/prd.md with "Reverse Engineered" status
- Created .ai/arch.md documenting observed React/Node architecture
- Established Epic structure based on major components
- Created stories for current work based on recent commits

## User Consultation
- Confirmed e-commerce focus with client
- Clarified business goals for the platform
- Verified technology choices and constraints
- Agreed on priorities for ongoing development
</example>

<example type="invalid">
# Quick Analysis

Looked at the code and here's what I found:
- It seems to be a web app
- Uses some JavaScript framework
- Has a database

Let's start working on new features right away.
</example>
