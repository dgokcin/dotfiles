---
description: USE when creating pull requests to ensure standardized, well-documented PRs
globs: ["*.{md,txt}", ".github/**/*"]
---

# Pull Request Template Standards

<version>1.0.0</version>

## Requirements
- Follow standardized PR structure
- Include all required sections
- Use GitHub CLI for creation
- Follow conventional commit style for titles

## PR Structure

### 1. Title Format
- Format: `type(scope): description`
- Types:
  - feat: New features
  - fix: Bug fixes
  - docs: Documentation
  - style: Formatting
  - refactor: Code restructuring
  - test: Adding tests
  - chore: Maintenance
- Scope: Optional component/module name
- Description: Concise change summary

### 2. Description Sections

#### Required Headers
```markdown
## Summary
[Brief overview of changes]

## Changes
[Detailed list of modifications]

## Additional Notes
[Extra context or considerations]
```

#### Optional Headers
```markdown
## Breaking Changes
[If applicable]

## Testing Done
[Test coverage and results]

## Screenshots
[If UI changes]

## Related Issues
[Links to related tickets]
```

### 3. GitHub CLI Command Structure
```bash
gh pr create \
  --base main \
  --title "type(scope): description" \
  --body "## Summary

Brief overview

## Changes

- Change 1
- Change 2

## Additional Notes

Important considerations"
```

### 4. Content Guidelines

#### Summary Section
- One-paragraph overview
- Clear problem statement
- Solution approach
- Impact description

#### Changes Section
- Bullet-point format
- Group related changes
- Include file paths in backticks
- Note configuration changes
- List dependency updates

#### Additional Notes Section
- Deployment requirements
- Environment variables
- Database migrations
- Breaking changes
- Security considerations

## Examples

<example>
# Feature Addition PR

```bash
gh pr create --base main --title "feat(auth): implement oauth2 authentication" --body "## Summary
Implements OAuth2 authentication flow using Google and GitHub providers, enabling secure third-party authentication for users.

## Changes
- Add \`auth/oauth2/config.ts\` for provider configuration
- Implement OAuth2 middleware in \`auth/middleware/oauth.ts\`
- Create user registration flow in \`auth/services/registration.ts\`
- Add authentication tests in \`tests/auth/oauth2.test.ts\`
- Update API documentation for OAuth endpoints

## Testing Done
- ✅ Unit tests for OAuth flow
- ✅ Integration tests with mock providers
- ✅ Manual testing with Google OAuth

## Additional Notes
### Required Setup
- Add OAuth provider credentials to .env
- Run new user table migrations
- Update API documentation

### Security Considerations
- Implements PKCE flow
- Uses state parameter for CSRF protection
- Stores refresh tokens securely

Closes #123"
```
</example>

<example type="invalid">
```bash
gh pr create --title "oauth stuff" --body "added oauth to the system and fixed some bugs in the process"
```
Problems:
- Missing conventional commit format
- No structured sections
- Lacks specific changes
- No testing information
- Missing setup instructions
</example>

## Critical Considerations
<critical>
- NEVER include sensitive information (tokens, passwords, keys)
- ALWAYS use conventional commit format for titles
- ENSURE all code blocks are properly formatted
- INCLUDE breaking changes in both title and body
- MAINTAIN consistent markdown formatting
- TEST all commands before submitting
</critical>

## Validation Checklist
- [ ] Title follows conventional commit format
- [ ] All required sections are present
- [ ] Code changes are properly documented
- [ ] Breaking changes are clearly marked
- [ ] Testing information is included
- [ ] Setup instructions are clear
- [ ] Security considerations are noted
- [ ] Related issues are referenced