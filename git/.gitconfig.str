[user]
    name = Deniz Gökçin

[merge]
    ff = false
    tool = meld

[mergetool "meld"]
    # Choose one of these 2 lines (not both!) explained below.
    cmd = meld "$LOCAL" "$MERGED" "$REMOTE" --output "$MERGED"

[diff]
    tool = meld

[difftool]
    prompt = false

[difftool "meld"]
    cmd = meld "$LOCAL" "$REMOTE"

[core]
    filemode = false
    autocrlf = input
    whitespace = cr-at-eol

[alias]
    # Add
    a = add

    # Add
    f = fetch

    # Status
    s = status

    # Push
    p = push

    # Set upstream automatically
    po = !git push -u origin  $(git symbolic-ref --short HEAD)

    # Git stash,fetch and pull
    sfp = "!git stash && git fetch && git pull"

    # Git add, git commit, git push
    acp = "!f() { git add -A && git commit -m \"$@\" && git push; }; f"

    # Git commit, git push
    cp = "!f() { git commit -m \"$@\" && git push; }; f"

    # Git log with tree view
    tlog="!git log --all --decorate --oneline --graph"
    
    # Show the diff between the latest commit and the current state
    d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

    # Switch to a branch, creating it if necessary
    go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

    # List aliases
    aliases = config --get-regexp alias

    # Amend the currently staged files to the latest commit
    amend = commit --amend --reuse-message=HEAD

    # Interactive rebase with the given number of latest commits
    reb = "!r() { git rebase -i HEAD~$1; }; r"

    # Find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"

    # Find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"

    # Find commits by source code
    fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

    # Find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

    # Remove branches that have already been merged with master
    # a.k.a. ‘delete merged’
    dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

    # List contributors with number of commits
    contributors = shortlog --summary --numbered

    # Show the user email for the current repository.
    whoami = config user.email

[help]

    # Automatically correct and execute mistyped commands
    autocorrect = 1

