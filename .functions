# Makes a new directory and cds to it
mcd () {
    mkdir -p $1 && cd $1
}

# For handling common typos that I make all the time
function cim() {
    vim $1
}

function bim() {
    vim $1
}

function ci() {
    vi $1
}

function bi () {
    vi $1
}

# Extract most know archives with one command
function extract()
{
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xvjf $1     ;;
            *.tar.gz)    tar xvzf $1     ;;
            *.bz2)       bunzip2 $1      ;;
            *.rar)       unrar x $1      ;;
            *.gz)        gunzip $1       ;;
            *.tar)       tar xvf $1      ;;
            *.tbz2)      tar xvjf $1     ;;
            *.tgz)       tar xvzf $1     ;;
            *.zip)       unzip $1        ;;
            *.Z)         uncompress $1   ;;
            *.7z)        7z x $1         ;;
            *)           echo "'$1' cannot be extracted via >extract<" ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}

# Creates an archive (*.tar.gz) from given directory.
function maketar() { tar cvzf "${1%%/}.tar.gz"  "${1%%/}/"; }

# Create a ZIP archive of a file or folder.
function zipf() { zip -r "${1%%/}.zip" "$1" ; }

# TerraGrunt Clear cache
function tgc() {
    echo "Are you sure you want to delete .terragrunt-cache directory and .terraform.lock.hcl file? (y/n)"
    read answer
    if [ "$answer" != "${answer#[Yy]}" ] ;then
        find . -iname ".terragrunt-cache" -type d -exec rm -rf {} +;
        find . -iname ".terraform.lock.hcl" -type f -exec rm -rf {} +;
    else
        echo "Exiting..."
        exit 1
    fi
}


function nmc() {
    echo "Are you sure you want to delete node_modules recursively? (y/n)"
    read answer
    if [ "$answer" != "${answer#[Yy]}" ] ;then
        find . -iname "node_modules" -type d -exec rm -rf {} +;
    else
        echo "Exiting..."
        exit 1
    fi
}

function move_env_file() {
    if [ -f .env.local ]; then
        echo "A .env.local file already exists. Do you want to overwrite it? (y/n)"
        read answer
        if [ "$answer" = "y" ]; then
            cp .env.local .env.local-$(date +%Y%m%d-%H%M%S)
            cp $1 .env.local
        fi
    else
        cp $1 .env.local
    fi
}


# a function to kill all processes on a given port
function killport() {
    lsof -t -i tcp:$1 | xargs kill
}

# Functions needed for the copilot aliases to work
eval_git_question() {
  eval "gh copilot suggest -t git \"$1\""
}

eval_gh_question() {
  eval "gh copilot suggest -t gh \"$1\""
}

eval_shell_question() {
  eval "gh copilot suggest -t shell \"$1\""
}

# Function to create a pull request with the base branch set to the current main branch of the repository
function create_pr() {
    # Get the current main branch of the repository
    current_main_branch=$(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')

    # Execute the gh pr create command with the base set to the current main branch
    gh pr create --base "$current_main_branch"
}
