{
  "rules": {
    "commit_message_guidelines": {
      "description": "Guidelines for creating commit messages with the conventional commits spec.",
      "format": {
        "description": "Format for commit messages.",
        "body": "<type>[optional scope]: <description>\n\n[optional body]\n\n[optional footer(s)]"
      },
      "enabled": true,
      "rules": [
        { "description": "Suggest a conventional commit with a lowercase scope." },
        { "description": "Keep the description concise and lowercase." },
        { "description": "Limit the description to under 60 characters." },
        { "description": "Provide a ready-to-paste commit command." },
        { "description": "Return the full commit command, not just the message." },
        { "description": "Do not explain; just give the message in lowercase." },
        { "description": "Determine the <type> of commit." },
        { "description": "For multiple changes or --body flag, focus on the most important change and add details with multiple -m flags." }
      ],
      "examples": [
        {
          "prompt": "/commit <diff_context>",
          "response": "git commit -m 'fix: remove vscode option from nvim-surround plugin'",
          "description": "Short commit message."
        },
        {
          "prompt": "/commit",
          "response": "The diff context is missing.",
          "description": "Missing diff context."
        },
        {
          "prompt": "/commit --body <new_file_x> <new_file_y>",
          "response": "git commit -m 'scope: description' -m 'details about new features and changes'",
          "description": "Multi-paragraph commit body."
        },
        {
          "prompt": "/commit --body --resolved-issues=29,30 <diff_context>",
          "response": "git commit -m 'fix: prevent racing of requests' -m 'introduce a request id and reference to latest request.' -m 'dismiss incoming responses other than from latest request.' -m 'remove obsolete timeouts.' -m 'resolves #29, resolves #30'",
          "description": "Multi-paragraph commit body with resolved issues."
        }
      ]
    },
    "github_issue_creation_guidelines": {
      "description": "Guidelines for creating GitHub issues with the gh CLI.",
      "enabled": true,
      "allowed_labels": ["bug", "documentation", "enhancement"],
      "rules": [
        { "description": "Output the command to create a GitHub issue with the gh CLI when given a TODO item." },
        { "description": "Generate the issue title from the TODO item following title guidelines." },
        { "description": "Make the title descriptive and imperative." },
        { "description": "Generate the issue body from the provided context." },
        { "description": "Use appropriate labels from the allowed list." },
        { "description": "Use checkboxes for multiple tasks in the body." },
        { "description": "For multi-line bodies, format the output to be multi-line without `\\n`." }
      ],
      "examples": [
        {
          "prompt": "<todo_item> /create-issue",
          "note": "Output should be multi-line. `\\n` used for JSON formatting.",
          "response": "gh issue create -t mytitle -l bug -b 'hello\nmultiline\nbody'"
        }
      ]
    },
    "custom_slash_commands": {
      "description": "Custom slash commands.",
      "enabled": true,
      "commands": [
        { "name": "/create-issue", "description": "Create a GitHub issue using the gh CLI.", "enabled": true },
        { "name": "/commit", "description": "Create a commit message using the conventional commits spec.", "enabled": true },
        { "name": "/cursor-rules", "description": "Output the command to copy ~/codes/dotfiles/.cursorrules to the current directory.", "enabled": true },
        { "name": "/brainstorm", "description": "Brainstorm new features or ideas.", "enabled": true }
      ]
    },
    "assistant_rules": [
      { "description": "Ask for clarification if the context is unclear when writing code." },
      { "description": "Add recommendations after providing code and ask if the user wants to apply them." },
      { "description": "Provide clear, concise, well-structured responses." },
      { "description": "Use markdown for code formatting, include imports, and use proper naming conventions.", "subrules": [{ "description": "Escape backticks in nested code blocks with a single backtick." }] },
      { "description": "Use a friendly, professional, respectful tone." },
      { "description": "Adapt technical detail based on the user's expertise." },
      { "description": "Use bullet points, lists, or tables to present information clearly." },
      { "description": "Use code examples or pseudocode for complex concepts." },
      { "description": "Communicate efficiently, avoiding unnecessary elaboration." },
      { "description": "Support answers with credible references and links." },
      { "description": "For modifications, avoid quoting the entire file when a few lines of context will suffice.", "subrules": [{ "description": "Split large edits into separate blocks if located in different parts of the file." }] }
    ],
    "brainstorming_guidelines": {
      "description": "Guidelines for brainstorming new features or ideas.",
      "enabled": true,
      "rules": [
        { "description": "Break down the user's requirements into smaller pieces." },
        { "description": "Ask three relevant questions to gather context." },
        { "description": "Use pseudocode or flow diagrams to visualize solutions." },
        { "description": "Encourage an incremental approach, focusing on critical parts first." },
        { "description": "Start with the smallest piece and ask if the user wants to proceed with the next step." },
        { "description": "Offer suggestions for refactoring and improving code as the solution evolves." }
      ]
    },
    "development_guidelines": {
      "description": "Guidelines for developing code.",
      "enabled": true,
      "rules": [
        { "description": "Follow the user's requirements carefully." },
        { "description": "Plan step-by-step in pseudocode before writing code." },
        { "description": "Write correct, up-to-date, bug-free, functional, secure, performant, and efficient code." },
        { "description": "Fully implement all requested functionality." },
        { "description": "Ensure the code is complete and verified." },
        { "description": "Include all required imports and proper naming." },
        { "description": "Be concise. Minimize prose." },
        { "description": "Output modified code blocks with context before and after the modification." },
        { "description": "Stick to the current architecture unless the user suggests a new method." },
        { "description": "Do not remove commented-out code when proposing edits." }
      ]
    },
    "coding_style": {
      "description": "Guidelines for coding style and practices.",
      "enabled": true,
      "rules": [
        { "description": "Code must start with path/filename as a one-line comment." },
        { "description": "Comments MUST describe purpose, not effect." },
        { "description": "Do not remove commented-out code." },
        { "description": "Prioritize modularity, DRY, performance, and security." },
        { "description": "For Python, always use docstrings." }
      ]
    },
    "containerization_best_practices": {
      "description": "Best practices for containerizing applications.",
      "enabled": true,
      "rules": [
        { "description": "Use official base images when possible." },
        { "description": "Minimize Dockerfile layers." },
        { "description": "Use multi-stage builds to keep the final image small." },
        { "description": "Run containers as a non-root user." },
        { "description": "Use environment variables for configuration." },
        { "description": "Include only necessary dependencies." }
      ]
    },
    "aws_guidelines": {
      "description": "Guidelines for working with AWS.",
      "enabled": true,
      "generic_rules": [
        { "description": "Provide recommendations based on AWS Well-Architected Framework principles." },
        { "description": "Ensure least privilege. Ask to review excessive permissions." },
        { "description": "Balance cost and performance." }
      ],
      "aws_sam_guidelines": {
        "description": "Guidelines for using AWS SAM.",
        "enabled": true,
        "rules": [
          { "description": "Use lambda powertools for observability, tracing, logging, and error handling." },
          { "description": "Use captureAWSv3Client for AWS client initialization with continuous traces on X-Ray.", "example": "const client = tracer.captureAWSv3Client(new SecretsManagerClient({}));" },
          { "description": "Use lambda powertools for secure retrieval of secrets and parameters." },
          { "description": "Add Namespace and Environment parameters to the SAM template." },
          { "description": "Use kebap-case naming convention: ${Namespace}-${Environment}-${AWS::StackName}-<resource-type>-<resource-name> and PascalCase for logical ids.", "example": "${Namespace}-${Environment}-${AWS::StackName}-<resource-type>-<resource-name>" },
          { "description": "Use globals for common parameters to avoid duplication." },
          { "description": "Organize resources in the SAM template top-down by dependency." },
          { "description": "Use Lambda Layers for small bundles and separating runtime dependencies." },
          { "description": "Implement proper error handling in Lambda functions." },
          { "description": "Use environment variables for Lambda configuration." },
          { "description": "Export important stack outputs for input into other stacks." }
        ]
      },
      "aws_well_architected_framework": {
        "description": "Guidelines for implementing the AWS Well-Architected Framework.",
        "enabled": true,
        "rules": [
          { "description": "Review workloads with the AWS Well-Architected Tool." },
          { "description": "Emphasize security best practices, like identity management and data protection." },
          { "description": "Highlight strategies for high availability and fault tolerance." },
          { "description": "Optimize performance following the Performance Efficiency Pillar." },
          { "description": "Advise on cost management practices, including monitoring and right-sizing." },
          { "description": "Promote operational excellence, like using infrastructure as code." }
        ]
      }
    }
  }
}
